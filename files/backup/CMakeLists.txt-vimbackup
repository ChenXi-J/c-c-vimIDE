# CMake 最低版本号要求
cmake_minimum_required (VERSION 2.8)


# 项目信息
project (main)

SET(ENV{OpenCV_DIR} /home/pynix/Demo/opencv-3.2.0/build)
# specify the cross compiler
SET(CMAKE_C_COMPILER   /usr/bin/aarch64-linux-gnu-gcc)
SET(CMAKE_CXX_COMPILER /usr/bin/aarch64-linux-gnu-g++)
# where is the target environment 
SET(CMAKE_FIND_ROOT_PATH  /usr/aarch64-linux-gnu/)

#add_definitions(-Wno-unused-command-line-argument)
#add_definitions(-Wall)
#add_definitions(-fPIC)
#add_definitions(-g)
#add_definitions(-O3)
#add_definitions(-funroll-loops)
#add_definitions(-Wno-overloaded-virtual)
#add_definitions(-Wno-deprecated-register)
add_compile_options($<$<COMPILE_LANGUAGE:C>:-std=c99>)




FIND_PACKAGE( OpenMP REQUIRED)
if(OPENMP_FOUND)
    message("OPENMP FOUND")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

#find_package(OpenCV QUIET COMPONENTS core highgui imgproc imgcodecs)
#if(NOT OpenCV_FOUND)
#    find_package(OpenCV REQUIRED COMPONENTS core highgui imgproc)
#endif()

find_package(OpenCV REQUIRED)




# 查找目录下的所有源文件,并将名称保存到 DIR_SRCS 变量
aux_source_directory(. DIR_SRCS)
aux_source_directory(./src DIR_SRCS)
aux_source_directory(./easylogger/src DIR_SRCS)
aux_source_directory(./easylogger/plugins/file/src DIR_SRCS)
aux_source_directory(./easylogger/port DIR_SRCS)


#第三方库的.h文件和.a文件
include_directories(${PROJECT_SOURCE_DIR}/include)
include_directories(${PROJECT_SOURCE_DIR}/oepc_aarch64)
include_directories(${PROJECT_SOURCE_DIR}/mjpg-streamer)
include_directories(${PROJECT_SOURCE_DIR}/easylogger/inc)
include_directories(${PROJECT_SOURCE_DIR}/easylogger/plugins)
link_directories(${PROJECT_SOURCE_DIR}/lib)
link_directories(${PROJECT_SOURCE_DIR}/plugins)


# 指定生成目标
add_executable(main ${DIR_SRCS})

#链接.a库
target_link_libraries(main oepc mjpg_streamer ncnn m stdc++ dl ${OpenCV_LIBS})






