#define _DEFAULT_SOURCE
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <sys/time.h>
#include <fcntl.h>
#include <stropts.h>
#include <arpa/inet.h>
#include "ioctl_cmd.h"
#include "uart485.h"
#include "net.h"


static unsigned char uart485_sendbuf[64];
static int uart485_sendlen = 0;
static unsigned char uart485_recvbuf[64];
static int uart485_recvlen = 0;
static int uart485_fd;

void Crc16(unsigned char frame[], unsigned char length) {

	unsigned int crc16 = 0xffff;
	unsigned char byteIndex, n;
	for (byteIndex = 0; byteIndex < length - 2; byteIndex++)  {
		crc16 ^= frame[byteIndex];
		for (n = 0; n < 8; n++) {
			if (crc16 & 1) {
				crc16 >>= 1;
				crc16 ^= 0xA001;
			} else {
				crc16 >>= 1;
			}
		}
	}
	frame[length - 2] = crc16;
	frame[length - 1] = crc16 >> 8;
}


void uart485_send(int fd, unsigned char *buf, unsigned int len)
{
	//uart485_sendMode();
	//usleep(1000);  //等待模式转换
	write(fd, buf,len);
	//usleep(1000000/9600*((len+1)*8+6));  //等待发送完成
	//uart485_recvMode();
}

int uart485_recv(int fd, unsigned char *buf,unsigned int len)
{
	struct timeval t1,t2;

	int tmpLen = 0;
	int res = 0;
	long diff;

	gettimeofday(&t1, NULL);
	while(1)
	{
		gettimeofday(&t2, NULL);
		diff = (t2.tv_sec - t1.tv_sec)*1000000 + (t2.tv_usec - t1.tv_usec);
		if(diff >= 100000) //>= 100ms
		{
			return tmpLen;  //超时
		}

		res = read(fd, buf+tmpLen,len-tmpLen);
		if(res >0)
		{
			tmpLen += res;
			if(tmpLen == len)
			{
				return tmpLen;
			}
		}
	}

}

int uart485_open(void)
{
	uart485_fd=open("/dev/ttysWK2",O_RDWR);
	fcntl(uart485_fd,F_SETFL,fcntl(uart485_fd,F_GETFL)|O_NONBLOCK);

	uart485_sendMode();
	if(uart485_fd < 0)
	{
		printf("open uart485 fail");
		return -1;
	}
	uart485_echoAll(0,0,0);
	return 0;
}

int uart485_close(void)
{
	close(uart485_fd);
}

//00 06 01 34 00 0C C8 2C
unsigned int uart485_packUp(unsigned char *buf,int16_t num)
{
	unsigned int len = 0;
	num = htons(num);
	buf[len++] = 0x00;
	buf[len++] = 0x06;
	buf[len++] = 0x01;
	buf[len++] = 0x34;

	memcpy(buf+len, &num,2);
	len+= 2;

	Crc16(buf,len+2);
	len+=2;

	return len;
}

unsigned int uart485_packDown(unsigned char *buf,int16_t num)
{
	unsigned int len = 0;
	num = htons(num);
	buf[len++] = 0x00;
	buf[len++] = 0x06;
	buf[len++] = 0x01;
	buf[len++] = 0xfc;

	memcpy(buf+len, &num,2);
	len+= 2;

	Crc16(buf,len+2);
	len+=2;

	return len;
}

unsigned int uart485_packNub(unsigned char *buf,int16_t num)
{
	unsigned int len = 0;
	num = htons(num);
	buf[len++] = 0x00;
	buf[len++] = 0x06;
	buf[len++] = 0x02;
	buf[len++] = 0xc4;

	memcpy(buf+len, &num,2);
	len+= 2;

	Crc16(buf,len+2);
	len+=2;

	return len;
}



void uart485_echoAll(int16_t up, int16_t down, int16_t nub)
{
	int reTryCount = 0;


	uart485_recvlen  = 0;
	reTryCount = 0;
	uart485_sendlen = uart485_packUp(uart485_sendbuf,up);
	while(uart485_recvlen != uart485_sendlen)
	{
		printf("try up\n");
		uart485_send(uart485_fd,uart485_sendbuf,uart485_sendlen);
		uart485_recvlen = uart485_recv(uart485_fd,uart485_recvbuf,2);

		if(++reTryCount >2)
		{
			break;
		}
	}
	printf("len=%d  ",uart485_recvlen); 
	for(int i=0; i<uart485_recvlen; i++)
	{
		printf("%02x " ,uart485_recvbuf[i]);
	}
	printf("\n");

	//usleep(100000);

	uart485_recvlen  = 0;
	reTryCount = 0;
	uart485_sendlen = uart485_packDown(uart485_sendbuf,down);
	while(uart485_recvlen != uart485_sendlen)
	{
		printf("try down\n");
		uart485_send(uart485_fd,uart485_sendbuf,uart485_sendlen);
		uart485_recvlen = uart485_recv(uart485_fd,uart485_recvbuf,2);

		if(++reTryCount >2)
		{
			break;
		}
	}
	printf("len=%d  ",uart485_recvlen); 
	for(int i=0; i<uart485_recvlen; i++)
	{
		printf("%02x " ,uart485_recvbuf[i]);
	}
	printf("\n");
	//usleep(100000);

	uart485_recvlen  = 0;
	reTryCount = 0;
	uart485_sendlen = uart485_packNub(uart485_sendbuf,nub);
	while(uart485_recvlen != uart485_sendlen)
	{
		printf("try hub\n");
		uart485_send(uart485_fd,uart485_sendbuf,uart485_sendlen);
		uart485_recvlen = uart485_recv(uart485_fd,uart485_recvbuf,2);

		if(++reTryCount >2)
		{
			break;
		}
	}
	printf("len=%d  ",uart485_recvlen); 
	for(int i=0; i<uart485_recvlen; i++)
	{
		printf("%02x " ,uart485_recvbuf[i]);
	}
	printf("\n");
	//usleep(100000);
}

