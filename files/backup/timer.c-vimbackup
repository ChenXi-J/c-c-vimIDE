#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <stdbool.h>

#include "timer.h"

#define MAX_TIMER_NUM 10
static pthread_t timerpd;

struct{
	bool multi;
	int nowsec;
	int sec;
	timer_fun fun;
	void *arg;
}timerStu[MAX_TIMER_NUM];


void* timer_pthread(void* arg)
{
	for(int i=0; i<MAX_TIMER_NUM; i++)
	{
		if(timerStu[i].fun != NULL)
		{
			if(timerStu[i].nowsec++ >= timerStu[i].sec)
			{
				timerStu[i].fun(timerStu[i].arg);
				timerStu[i].nowsec = 0;

				if(!timerStu[i].multi)
				{
					timerStu[i].nowsec = 0;
					timerStu[i].sec = 0;
					timerStu[i].fun = NULL;
					timerStu[i].arg = NULL;
					timerStu[i].multi = false;
				}
			}
		}
	}

	sleep(1);
}

void timer_init(void)
{
	for(int i =0; i< MAX_TIMER_NUM; i++)
	{

		timerStu[i].nowsec = 0;
		timerStu[i].sec = 0;
		timerStu[i].fun = NULL;
		timerStu[i].arg = NULL;
		timerStu[i].multi = false;
	}

	pthread_create(&timerpd, NULL, timer_pthread, NULL);
}

void timer_destroy(void)
{
	pthread_cancel(timerpd);
}

int timer_add(int sec, bool multi, timer_fun fun, void* arg)
{
	int res = -1;
	for(int i=0; i< MAX_TIMER_NUM; i++)
	{
		if(timerStu[i].fun == NULL)
		{
			timerStu[i].nowsec = 0;
			timerStu[i].sec = sec;
			timerStu[i].fun = fun;
			timerStu[i].arg = arg;
			timerStu[i].multi = multi;
			res = i;
			break;
		}
	}

	return res;
}

void timer_del(int num)
{
	if(num <0 || num >=MAX_TIMER_NUM)
	{
		return ;
	}

	timerStu[num].nowsec = 0;
	timerStu[num].sec = 0;
	timerStu[num].fun = NULL;
	timerStu[num].arg = NULL;
	timerStu[num].multi = false;
}

