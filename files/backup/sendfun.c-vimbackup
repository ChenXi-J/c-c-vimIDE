#define LOG_TAG "sendfun"

#include <stdio.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>
#include "sendfun.h"
#include "recvfun.h"
#include "net.h"
#include "sendneed.h"
#include "packed.h"
#include <elog.h>
#include "gps.h"
#include "update.h"
#include <sys/stat.h>
#include <fcntl.h>

extern sysInfoStu g_sysInfo;

static uint16_t sendfunRegisterCmd(uint8_t *sendbuf, uint16_t maxlen);
static uint16_t sendfunAuthCmd(uint8_t *sendbuf, uint16_t maxlen);
static uint16_t sendfunVersionCmd(uint8_t *sendbuf, uint16_t maxlen);
static uint16_t sendfunGpsCmd(uint8_t *sendbuf, uint16_t maxlen);
static uint16_t sendfunPeopleCmd(uint8_t *sendbuf, uint16_t maxlen);
static uint16_t sendfunPhotoRes(uint8_t *sendbuf, uint16_t maxlen);
static uint16_t sendfunMediaCmd(uint8_t *sendbuf, uint16_t maxlen);
static uint16_t sendfunGetTxtRes(uint8_t *sendbuf, uint16_t maxlen);
static uint16_t sendfunGetIPCmd(uint8_t *sendbuf, uint16_t maxlen);
static uint16_t sendfunUniversalCmd(uint8_t *sendbuf, uint16_t maxlen);
static uint16_t sendfunUpdateTransCmd(uint8_t *sendbuf, uint16_t maxlen);
static uint16_t sendfunUpdateEndCmd(uint8_t *sendbuf, uint16_t maxlen);

static sendfunStu s_sendfun_cmd[] = {
	{TERMINAL_REGISTER_CMD, sendneedRegisterCmd, sendfunRegisterCmd},
	{TERMINAL_AUTH_CMD, sendneedAuthCmd, sendfunAuthCmd},
	{TERMINAL_VERSION_CMD, sendneedVersionCmd, sendfunVersionCmd},
	{TERMINAL_GPS_CMD, sendneedGpsCmd, sendfunGpsCmd},
	{TERMINAL_PEOPLE_CMD, sendneedPeopleCmd, sendfunPeopleCmd},
	{CMAERA_PHOTO_RES, sendneedPhotoRes, sendfunPhotoRes},
	{TERMINAL_MEDIA_CMD, sendneedMediaCmd, sendfunMediaCmd},
	{PLATFORM_GETTXT_RES, sendneedGetTxtRes, sendfunGetTxtRes},
	{TERMINAL_GETIP_CMD, sendneedGetIPCmd, sendfunGetIPCmd},
	{TERMINAL_UNIVERSAL_HANDLE, sendneedUniversalCmd, sendfunUniversalCmd},
	{UPDATE_TRANS_CMD, sendneedUpdateTransCmd, sendfunUpdateTransCmd},
	{UPDATE_END_CMD, sendneedUpdateEndCmd, sendfunUpdateEndCmd}

};

uint16_t sendfunRegisterCmd(uint8_t *sendbuf, uint16_t maxlen)
{
	log_d("send Register");

	uint16_t len = 0;

	memset(sendbuf, 0, maxlen);


	sendbuf[len++] = 0x00;		// 省ID
	sendbuf[len++] = 0x32;
	sendbuf[len++] = 0x00;		// 市县ID
	sendbuf[len++] = 0x00;
	sendbuf[len++] = 0x38;		// 制造商ID5，5字节
	sendbuf[len++] = 0x38;
	sendbuf[len++] = 0x38;
	sendbuf[len++] = 0x38;
	sendbuf[len++] = 0x38;
	sendbuf[len++] = g_sysInfo.termType[0];// 终端型号
	sendbuf[len++] = g_sysInfo.termType[1];
	len += 18;


	sendbuf[len++] = g_sysInfo.termID[0];//0x69;// 终端ID，7字节
	sendbuf[len++] = g_sysInfo.termID[1];//0x32;
	sendbuf[len++] = g_sysInfo.termID[2];//0x36;
	sendbuf[len++] = g_sysInfo.termID[3];//0x33;
	sendbuf[len++] = g_sysInfo.termID[4];//0x34;
	sendbuf[len++] = g_sysInfo.termID[5];//0x35;
	sendbuf[len++] = g_sysInfo.termID[6];//0x30;
	for(int i=len-8; i<len;i++)
    {
                printf("%#x ",sendbuf[i]);
    }
	sendbuf[len++] = 1;				// 车牌颜色
	sendbuf[len++] = 0xCB;		// 车牌号
	sendbuf[len++] = 0xD5;
	sendbuf[len++] = 0x45;
	sendbuf[len++] = 0x36;
	sendbuf[len++] = 0x36;
	sendbuf[len++] = 0x36;
	sendbuf[len++] = 0x36;
	sendbuf[len++] = 0x36;

	packed(TERMINAL_REGISTER_CMD, sendbuf, &len,0,0);

	return len;
}

uint16_t sendfunAuthCmd(uint8_t *sendbuf, uint16_t maxlen)
{

	uint16_t len = 0;
	uint8_t *auth_ptr;

	log_d("send Auth");
	len = sendneedGetCmdArg(TERMINAL_AUTH_CMD, &auth_ptr);

	log_d("authlen:%d",len);
	log_d("register auth ptr :%p", auth_ptr);

	if(len > 100)
	{
		len = 100;
	}

	memcpy(sendbuf, auth_ptr, len);

	packed(TERMINAL_AUTH_CMD, sendbuf, &len,0,0);
	return len;

}

uint16_t sendfunVersionCmd(uint8_t *sendbuf, uint16_t maxlen)
{
	log_d("send Version");
	uint16_t len = 0;
	//arm版本号
	sendbuf[len++] = (SOFTWARE_VERSION>>24)&0xff;
	sendbuf[len++] = (SOFTWARE_VERSION>>16)&0xff;
	sendbuf[len++] = (SOFTWARE_VERSION>>8)&0xff;
	sendbuf[len++] = (SOFTWARE_VERSION)&0xff;
	//dsp版本号
	sendbuf[len++] = 3;
	sendbuf[len++] = 4;
	sendbuf[len++] = 2;
	sendbuf[len++] = 1;

	packed(TERMINAL_VERSION_CMD, sendbuf, &len,0,0);

	return len;
}

uint16_t sendfunGpsCmd(uint8_t *sendbuf, uint16_t maxlen)
{
	log_d("send Gps");
	uint16_t len = 0;
	uint32_t alarm_flag = 0; //报警标志位
	uint32_t status = 0;	//状态
	gpsInfoStu *gpsInfo;

	memset(sendbuf, 0, 100);

	sendneedGetCmdArg(TERMINAL_GPS_CMD, (uint8_t**) &gpsInfo);

	sendneedArgLock((char*)gpsInfo);
	if(gpsInfo->location)
	{
		status |= 0x02;									// 已定位
	}

	if(gpsInfo->NS == 'N')
	{
		status &= 0xFB;
	}
	else if(gpsInfo->NS == 'S')
	{
		status|= 0x04;
	}
	if(gpsInfo->EW == 'E')
	{
		status&= 0xF7;
	}
	else if(gpsInfo->EW == 'W')
	{
		status|= 0x08;
	}
	*(uint32_t*)(sendbuf+len) = htonl(alarm_flag);
	len += 4;
	*(uint32_t*)(sendbuf+len) = htonl(status);
	len += 4;
	*(uint32_t*)(sendbuf+len) = htonl(gpsInfo->latitude);
	len += 4;
	*(uint32_t*)(sendbuf+len) = htonl(gpsInfo->longitude);
	len += 4;
	*(uint16_t*)(sendbuf+len) = htons(gpsInfo->height);
	len += 2;
	*(uint16_t*)(sendbuf+len) = htons(gpsInfo->speed);
	len += 2;
	*(uint16_t*)(sendbuf+len) = htons(gpsInfo->direction);
	len += 2;

	memcpy(sendbuf+len, gpsInfo->gpsTime, 6);			// 时间,BCD格式
	len += 6;

	sendneedArgUnlock((char*)gpsInfo);

	packed(TERMINAL_GPS_CMD, sendbuf, &len,0,0);

	return len;
}

uint16_t sendfunPeopleCmd(uint8_t *sendbuf, uint16_t maxlen)
{
	log_d("send People");

	uint16_t len = 0;;
	uint16_t *people;
	gpsInfoStu *gpsInfo;

	memset(sendbuf, 0, 100);
	sendneedGetCmdArg(TERMINAL_GPS_CMD, (uint8_t**) &gpsInfo);
	sendneedGetCmdArg(TERMINAL_PEOPLE_CMD, (uint8_t**) &people);

	sendneedArgLock((char*)gpsInfo);
	sendneedArgLock((char*)people);
	*(sendbuf+len) = 0xf0;//透传消息类型
	len += 1;

	*(uint32_t*)(sendbuf+len) = htonl(gpsInfo->latitude);
	len += 4;
	*(uint32_t*)(sendbuf+len) = htonl(gpsInfo->longitude);
	len += 4;
	*(uint16_t*)(sendbuf+len) = htons(gpsInfo->height);
	len += 2;
	*(uint16_t*)(sendbuf+len) = htons(gpsInfo->speed);
	len += 2;
	*(uint16_t*)(sendbuf+len) = htons(gpsInfo->direction);
	len += 2;
	memcpy(sendbuf+len, gpsInfo->gpsTime, 6);			// 时间,BCD格式
	len += 6;

	sendbuf[len++] = 0x07;
	sendbuf[len++] = 0x53;
	sendbuf[len++] = 0x00;
	sendbuf[len++] = 0x08;


	*(uint16_t*)(sendbuf+len) = htons(people[0]);
	len += 2;
	*(uint16_t*)(sendbuf+len) = htons(people[1]);
	len += 2;
	*(uint16_t*)(sendbuf+len) = htons(people[2]);
	len += 2;
	*(uint16_t*)(sendbuf+len) = htons(people[3]);
	len += 2;

	sendneedArgUnlock((char*)people);
	sendneedArgUnlock((char*)gpsInfo);

	packed(TERMINAL_PEOPLE_CMD,sendbuf,&len,0,0);

	return len;
}

uint16_t sendfunPhotoRes(uint8_t *sendbuf, uint16_t maxlen)
{
	log_d("send Photo");
	uint16_t len = 0;

	return len;
}

uint16_t sendfunMediaCmd(uint8_t *sendbuf, uint16_t maxlen)
{
	log_d("send Media");
	uint16_t len = 0;

	return len;
}

uint16_t sendfunGetTxtRes(uint8_t *sendbuf, uint16_t maxlen)
{
	log_d("send GetTxt");
	uint16_t len = 0;

	return len;
}

uint16_t sendfunGetIPCmd(uint8_t *sendbuf, uint16_t maxlen)
{
	log_d("send GetIP");
	uint16_t len = 0;

	packed(TERMINAL_GETIP_CMD, sendbuf, &len,0,0);
	return len;
}

uint16_t sendfunUniversalCmd(uint8_t *sendbuf, uint16_t maxlen)
{
	log_d("send universal");
	uint16_t len = 0;
	uint16_t *univerRes, univerResLen;


	univerResLen = sendneedGetCmdArg(TERMINAL_UNIVERSAL_HANDLE, (uint8_t**)&univerRes);

	*(uint16_t*)(sendbuf+len) = htons(univerRes[0]);
	len += 2;
	*(uint16_t*)(sendbuf+len) = htons(univerRes[1]);
	len += 2;
	*(sendbuf+len) = univerRes[2]? 0:1;
	len += 1;


	if(univerRes[1] == UPDATE_START_HANDLE)
	{
		log_i("update start trans");
		sendneedClearCmd(TERMINAL_UNIVERSAL_HANDLE);
		sendneedClearCmdArg(TERMINAL_UNIVERSAL_HANDLE);

		sendneedSetCmd(UPDATE_TRANS_CMD);
	}

	packed(TERMINAL_UNIVERSAL_HANDLE, sendbuf, &len,0,0);
	return len;
}

uint16_t sendfunUpdateTransCmd(uint8_t *sendbuf, uint16_t maxlen)
{
	log_d("send update trans");
	uint16_t len = 0;
	updateInfoStu *updateInfo;

	sendneedGetCmdArg(UPDATE_TRANS_CMD,(uint8_t**)&updateInfo);
	sendneedArgLock((char*)updateInfo);

	memcpy(sendbuf, updateInfo->upNum, 8); //升级流水号
	len += 8;
	*(uint16_t*)(sendbuf+len) = htons(updateInfo->upPackNum);
	len += 2;

	sendneedArgUnlock((char*)updateInfo);

	log_i("update send:packNum:%d", updateInfo->upPackNum);

	if(updateInfo->upPackNum == 1)
	{
		sleep(3);  //保证应答更新先收到
	}

	packed(UPDATE_TRANS_CMD, sendbuf, &len,0,0);
	return len;
}

uint16_t sendfunUpdateEndCmd(uint8_t *sendbuf, uint16_t maxlen)
{
	log_d("send update end");
	uint16_t len = 0;
	updateInfoStu *updateInfo;

	sendneedGetCmdArg(UPDATE_TRANS_CMD,(uint8_t**)&updateInfo);
	sendneedArgLock((char*)updateInfo);

	memcpy(sendbuf+len, updateInfo->upNum, 8);
	len += 8;
	if(update_check(updateInfo->upSum))
	{
		log_i("update check success");
		sendbuf[len++] = 0;
	}
	else
	{
		log_i("update check fail");
		sendbuf[len++] = 1;
	}
	sendneedArgUnlock((char*)updateInfo);

	packed(UPDATE_END_CMD, sendbuf, &len,0,0);
	return len;
}

void sendfunRun(void)
{
	time_t nowtime = time(NULL);
	for(uint16_t i = 0; i< (sizeof(s_sendfun_cmd)/sizeof(sendfunStu)); i++)
	{
		if(s_sendfun_cmd[i].needfun(nowtime))
		{
			//while(g_disconnect == true); //等待socket

			g_sendNum = s_sendfun_cmd[i].cmdfun(g_sendBuf, BUFSIZE);
			elog_hexdump("send",16,g_sendBuf,g_sendNum);
			send(g_socketfd, g_sendBuf, g_sendNum, 0);
		}
	}
}
